* Aesthetics
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package nofrils-acme-theme
    :ensure t)
  (require 'nofrils-acme-theme)
  (load-theme 'nofrils-acme t)
#+END_SRC

** Remove graphics bars
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

* Keybinds
** Buffers
*** Kill Current Buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    "kills focused buffer"
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

*** ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+END_SRC
** Live Config Reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* Programming
** C
#+BEGIN_SRC emacs-lisp
  (require 'cc-mode)
  (add-to-list 'c-mode-common-hook
	       (lambda () (setq c-syntactic-indentation nil)))
#+END_SRC

** Git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("M-g" . magit-status))
#+END_SRC

* Misc
** Autosave
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC

** Async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC

** Org-Mode
*** Common
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-log-done t)
  (setq org-agenda-files (quote ("~/org/school.org")))
#+END_SRC

*** Org-Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
*** Source Tags
Hitting tab after an "<el" in an org-mode file will create a template for elisp insertion.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

** UTF-8
Only use UTF-8, as god intended
#+BEGIN_SRC emacs-lisp 
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
